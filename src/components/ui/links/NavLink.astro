---
// Destructure the properties from Astro.props
const { url, name } = Astro.props;

// Define TypeScript interface for the properties
interface Props {
	url: string;
	name: string;
}
---

<a
	id={url === '/' ? 'home' : url.replace('/', '')}
	data-nav-item
	href={url}
	data-astro-prefetch
	class='invisible-nav-item rounded-lg text-base font-medium text-white outline-none ring-zinc-500 hover:text-neutral-500 focus-visible:ring dark:text-neutral-400 dark:ring-zinc-200 dark:hover:text-neutral-500 dark:focus:outline-none md:py-3 md:text-lg 2xl:text-base'>
	{name}
</a>

<script>
	document.addEventListener('DOMContentLoaded', function () {
		let url = window.location.pathname;
		let urlSegments = url.split('/');
		let navId;

		if (url === '/') {
			navId = 'home';
		} else {
			navId = url.replace('/', '');
		}

		let nav = document.getElementById(navId);
		let navItems = document.querySelectorAll('[data-nav-item]');
		const page = document.documentElement;
		const header = document.querySelector('#page-header') as HTMLElement;

		const insetTop_Offset = 16; // sticky position has top-4 '1rem = 16px'
		const d =
			page.clientHeight -
			page.scrollTop -
			header.offsetHeight -
			insetTop_Offset;

		if (nav) {
			nav.classList.remove(
				'text-white',
				'dark:text-neutral-400',
				'hover:text-neutral-500',
				'dark:hover:text-neutral-500'
			);
			nav.classList.add('text-brand', 'dark:text-brand');
			nav.setAttribute('aria-current', 'page');
		}
		if (navItems) {
      if (d < 0) {
        navItems.forEach((item) => {
          item.classList.add('text-white', 'dark:text-neutral-400');
          item.classList.remove('text-brand', 'dark:text-brand');
        });
      }
		}
	});
</script>
