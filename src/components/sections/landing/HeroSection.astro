---
import PrimaryCTA from '@components/ui/buttons/PrimaryCTA.astro';
import SecondaryCTA from '@components/ui/buttons/SecondaryCTA.astro';
import heroImage from '@images/cat_overhead.mp4';

const { title, primaryBtn, primaryBtnURL, secondaryBtn, secondaryBtnURL } =
	Astro.props;

interface Props {
	title: string;
	primaryBtn?: string;
	primaryBtnURL?: string;
	secondaryBtn?: string;
	secondaryBtnURL?: string;
	src?: any;
	alt?: string;
}
---

<section
	class='mx-auto h-screen max-w-[85rem] content-center items-center px-4 py-14 sm:px-6 lg:px-8 2xl:max-w-full'>
	<video
		class='absolute right-0 top-0 -z-10 h-full w-full object-cover brightness-50'
		onloadstart='this.playbackRate = 0.75;'
		playsinline
		autoplay
		muted
		loop>
		<source
			src={Astro.props.src ?? heroImage}
			type='video/mp4'
		/>
	</video>

	<div>
		<h1
			class='block text-balance text-6xl font-bold tracking-tight text-neutral-200 lg:text-8xl lg:leading-tight'>
			<!-- About Fragment: https://docs.astro.build/en/basics/astro-syntax/#fragments -->
			<Fragment set:html={title} />
		</h1>
		<div
			id='test_swap'
			class='overflow-hidden text-brand'>
		</div>

		<div class='mt-7 grid w-full justify-center gap-3 sm:inline-flex'>
			{
				primaryBtn && (
					<PrimaryCTA
						title={primaryBtn}
						url={primaryBtnURL}
					/>
				)
			}
			{
				secondaryBtn && (
					<SecondaryCTA
						title={secondaryBtn}
						url={secondaryBtnURL}
					/>
				)
			}
		</div>
	</div>
</section>

<script>
	import { TextPlugin, EasePack } from 'gsap/all';
	window.addEventListener('load', () => {
		if (window.gsap) {
			const gsap = window.gsap;
			// console.log("GSAP: ", gsap)
			gsap.registerPlugin(TextPlugin, EasePack);

			let container = document.getElementById('test_swap');

			function machineGun(text: any) {
				let words = text.split(' '),
					tl = gsap.timeline({
						delay: 0.6,
						repeat: 2,
						repeatDelay: 4
					}),
					wordCount = words.length,
					time = 0,
					word,
					element,
					duration,
					isSentenceEnd,
					i;

				for (i = 0; i < wordCount; i++) {
					word = words[i];
					console.log('word count: ', wordCount);
					console.log('i: ', i);
					console.log('WORD: ', word);
					//isSentenceEnd = _sentenceEndExp.test(word);
					console.log('CONTAINER: ', container);
					//container.innerHTML += `<h3>${word}</h3>`;

					container ? container.innerHTML = '' : undefined;
					let element = container?.appendChild(
						document.createElement('h3')
					);
					console.log('element: ', element);

					element ? element.textContent = word : undefined;
					console.log('BAR: ', container?.children);
					// element = $('<h3>' + word + '</h3>').appendTo(container);
					duration = Math.max(0.5, word.length * 0.08); //longer words take longer to read, so adjust timing. Minimum of 0.5 seconds.
					// if (isSentenceEnd) {
					// 	duration += 0.6; //if it's the last word in a sentence, drag out the timing a bit for a dramatic pause.
					// }
					//set opacity and scale to 0 initially. We set z to 0.01 just to kick in 3D rendering in the browser which makes things render a bit more smoothly.
					gsap.set(element, { autoAlpha: 0, scale: 0, z: 0.01 });
					//the SlowMo ease is like an easeOutIn but it's configurable in terms of strength and how long the slope is linear. See https://www.greensock.com/v12/#slowmo and https://api.greensock.com/js/com/greensock/easing/SlowMo.html
					tl.to(
						element,
						duration,
						{ scale: 1.2, ease: 'slow(0.25, 0.9)' },
						time
					)
						//notice the 3rd parameter of the SlowMo config is true in the following tween - that causes it to yoyo, meaning opacity (autoAlpha) will go up to 1 during the tween, and then back down to 0 at the end.
						.to(
							element,
							duration,
							{ autoAlpha: 1, ease: 'slow(0.25, 0.9, true)' },
							time
						);
					time += duration - 0.05;
					// if (isSentenceEnd) {
					// 	time += 0.6; //at the end of a sentence, add a pause for dramatic effect.
					// }
				}
			}

			machineGun(
				'foundation, community, environment, future, foundation, community, environment, future, foundation, community, environment, future, foundation, community, environment, future, foundation, community, environment, future, foundation, community, environment, future, foundation, community, environment, future, foundation, community, environment, future, foundation, community, environment, future, foundation, community, environment, future, foundation, community, environment, future, foundation, community, environment, future, foundation, community, environment, future, foundation, community, environment, future, foundation, community, environment, future, foundation, community, environment, future, end'
			);
		}
	});
</script>
