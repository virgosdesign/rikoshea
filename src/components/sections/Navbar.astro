---
//Import relevant dependencies
import { Icon } from 'astro-icon/components';
import ThemeIcon from '@components/ThemeIcon.astro';
import NavLink from '@components/ui/links/NavLink.astro';
import Authentication from './Authentication.astro';
import enStrings from '@utils/navigation.ts';
import frStrings from '@utils/fr/navigation.ts';
import LogoMark from '@/components/LogoMark.astro';
import IconMark from '@/components/IconMark.astro';
import LanguagePicker from '@components/ui/LanguagePicker.astro';
import WordMark from '../WordMark.astro';

// Select the correct translation based on the page's lang prop:
const strings = Astro.currentLocale === 'fr' ? frStrings : enStrings;
const homeUrl = Astro.currentLocale === 'fr' ? '/fr' : '/';
---

<!-- Main header component -->
<header
	id='page-header'
	class='sticky inset-x-0 top-4 z-50 flex w-full flex-wrap text-sm md:flex-nowrap md:justify-start'>
	<!-- Navigation container -->
	<nav
    id='main-navigation'
		class='relative mx-2 w-full rounded-[36px] px-4 py-3 md:flex md:items-center md:justify-between md:px-6 md:py-0 lg:px-8 xl:mx-auto duration-1000 delay-300'
		aria-label='Global'>
		<div id='brand' class='flex items-center justify-between'>
			<!-- Brand logo -->
			<a
				class='flex items-center gap-x-2 rounded-lg text-xl font-bold outline-none ring-zinc-500 focus-visible:ring dark:ring-zinc-200 dark:focus:outline-none'
				href={homeUrl}
				aria-label='Brand'>
				<IconMark class='size-16 duration-700' />
				<!-- Icon Mark -->
				<!-- <WordMark class="h-10 w-auto duration-1000 delay-75" /> -->
				<!-- <Icon
					name='icon_mark'
					class='size-16 duration-700'
				/> -->
				<Icon
					name='word_mark'
					class='h-10 w-auto duration-1000 delay-75'
				/>
			</a>
			<!-- Collapse toggle for smaller screens -->
			<div class='ml-auto mr-5 md:hidden'>
				<button
					type='button'
					class='hs-collapse-toggle flex h-8 w-8 items-center justify-center rounded-full text-sm font-bold text-neutral-600 transition duration-300 hover:bg-neutral-200 disabled:pointer-events-none disabled:opacity-50 dark:text-neutral-400 dark:hover:bg-neutral-700 dark:focus:outline-none'
					data-hs-collapse='#navbar-collapse-with-animation'
					aria-controls='navbar-collapse-with-animation'
					aria-label='Toggle navigation'>
					<svg
						class='h-[1.25rem] w-[1.25rem] flex-shrink-0 hs-collapse-open:hidden'
						width='24'
						height='24'
						viewBox='0 0 24 24'
						fill='none'
						stroke='currentColor'
						stroke-width='2'
						stroke-linecap='round'
						stroke-linejoin='round'>
						<line
							x1='3'
							x2='21'
							y1='6'
							y2='6'
						></line>
						<line
							x1='3'
							x2='21'
							y1='12'
							y2='12'
						></line>
						<line
							x1='3'
							x2='21'
							y1='18'
							y2='18'
						></line>
					</svg>
					<svg
						class='hidden h-[1.25rem] w-[1.25rem] flex-shrink-0 hs-collapse-open:block'
						width='24'
						height='24'
						viewBox='0 0 24 24'
						fill='none'
						stroke='currentColor'
						stroke-width='2'
						stroke-linecap='round'
						stroke-linejoin='round'>
						<path d='M18 6 6 18'></path>
						<path d='m6 6 12 12'></path>
					</svg>
				</button>
			</div>
			<!-- ThemeIcon component specifically for smaller screens -->
			<span class='inline-block md:hidden'>
				<ThemeIcon />
			</span>
		</div>
		<!-- Contains navigation links -->
		<div
			id='navbar-collapse-with-animation'
			class='hs-collapse hidden grow basis-full overflow-hidden transition-all duration-300 md:block'>
			<!-- Navigation links container -->
			<div
				class='mt-5 flex flex-col gap-x-0 gap-y-4 md:mt-0 md:flex-row md:items-center md:justify-end md:gap-x-4 md:gap-y-0 md:ps-7 lg:gap-x-7'>
				<!-- Navigation links and Authentication component -->
				{
					strings.navBarLinks.map(link => (
						<NavLink
							url={link.url}
							name={link.name}
						/>
					))
				}

				<Authentication />
				<LanguagePicker />
				<!-- ThemeIcon component specifically for larger screens -->
				<span class='hidden md:inline-block'>
					<ThemeIcon />
				</span>
			</div>
		</div>
	</nav>
</header>
<!-- Theme Appearance script to manage light/dark modes -->
<script is:inline>
	const HSThemeAppearance = {
		init() {
			const defaultTheme = 'default';
			let theme = localStorage.getItem('hs_theme') || defaultTheme;

			if (document.querySelector('html').classList.contains('dark'))
				return;
			this.setAppearance(theme);
		},
		_resetStylesOnLoad() {
			const $resetStyles = document.createElement('style');
			$resetStyles.innerText = `*{transition: unset !important;}`;
			$resetStyles.setAttribute('data-hs-appearance-onload-styles', '');
			document.head.appendChild($resetStyles);
			return $resetStyles;
		},
		setAppearance(theme, saveInStore = true, dispatchEvent = true) {
			const $resetStylesEl = this._resetStylesOnLoad();

			if (saveInStore) {
				localStorage.setItem('hs_theme', theme);
			}

			if (theme === 'auto') {
				theme = window.matchMedia('(prefers-color-scheme: dark)')
					.matches
					? 'dark'
					: 'default';
			}

			document.querySelector('html').classList.remove('dark');
			document.querySelector('html').classList.remove('default');
			document.querySelector('html').classList.remove('auto');

			document
				.querySelector('html')
				.classList.add(this.getOriginalAppearance());

			setTimeout(() => {
				$resetStylesEl.remove();
			});

			if (dispatchEvent) {
				window.dispatchEvent(
					new CustomEvent('on-hs-appearance-change', {
						detail: theme
					})
				);
			}
		},
		getAppearance() {
			let theme = this.getOriginalAppearance();
			if (theme === 'auto') {
				theme = window.matchMedia('(prefers-color-scheme: dark)')
					.matches
					? 'dark'
					: 'default';
			}
			return theme;
		},
		getOriginalAppearance() {
			const defaultTheme = 'default';
			return localStorage.getItem('hs_theme') || defaultTheme;
		}
	};
	HSThemeAppearance.init();

	window
		.matchMedia('(prefers-color-scheme: dark)')
		.addEventListener('change', () => {
			if (HSThemeAppearance.getOriginalAppearance() === 'auto') {
				HSThemeAppearance.setAppearance('auto', false);
			}
		});

	window.addEventListener('load', () => {
		const $clickableThemes = document.querySelectorAll(
			'[data-hs-theme-click-value]'
		);
		const $switchableThemes = document.querySelectorAll(
			'[data-hs-theme-switch]'
		);

		$clickableThemes.forEach($item => {
			$item.addEventListener('click', () =>
				HSThemeAppearance.setAppearance(
					$item.getAttribute('data-hs-theme-click-value'),
					true,
					$item
				)
			);
		});

		$switchableThemes.forEach($item => {
			$item.addEventListener('change', e => {
				HSThemeAppearance.setAppearance(
					e.target.checked ? 'dark' : 'default'
				);
			});

			$item.checked = HSThemeAppearance.getAppearance() === 'dark';
		});

		window.addEventListener('on-hs-appearance-change', e => {
			$switchableThemes.forEach($item => {
				$item.checked = e.detail === 'dark';
			});
		});
	});
</script>
<!--Import the necessary Collapse and Overlay plugins-->
<!--https://preline.co/plugins/html/collapse.html-->
<!--https://preline.co/plugins/html/overlay.html-->
<script
	is:inline
	src='/scripts/vendor/preline/collapse/index.js'
></script>
<script
	is:inline
	src='/scripts/vendor/preline/overlay/index.js'
></script>
<script>
	const header = document.querySelector('#page-header') as HTMLElement;
  const nav = document.querySelector('#main-navigation') as HTMLElement;
	const page = document.documentElement;
  const navItems = document.querySelectorAll('[data-nav-item]');
  const iconMark = document.querySelector('#icon_mark') as HTMLElement;
  //const wordMark = document.querySelector('#word_mark') as HTMLElement;
  // const iconMark = document.querySelector('[data-icon="icon_mark"]') as HTMLElement;
  const wordMark = document.querySelector('[data-icon="word_mark"]') as HTMLElement;

	document.addEventListener('scroll', () => {
    const insetTop_Offset = 16; // sticky position has top-4 '1rem = 16px'
		const d = page.clientHeight - page.scrollTop - header.offsetHeight - insetTop_Offset;
		nav.classList.toggle('visible-header', d < 0);
    iconMark.classList.toggle('small-icon-mark', d < 0);
    wordMark.classList.toggle('small-word-mark', d < 0);

    navItems.forEach(item => {

      if ( d < 0 ) item.classList.remove('text-white');
      else item.classList.add('text-white');
      item.classList.toggle('visible-nav-item', d < 0);
      if (item.ariaCurrent === 'page') {
        item.classList.add('text-yellow-500');
      }
    });
		// console.table({
		// 	clientHeight: page.clientHeight,
		// 	scrollTop: page.scrollTop,
		// 	offsetHeight: header.offsetHeight,
    //   d: page.clientHeight - page.scrollTop - header.offsetHeight - 16,
		// });
	});
</script>

<style>
  .visible-header {
    @apply bg-yellow-50/60 border-yellow-100/40 backdrop-blur-md
  }

  .visible-nav-item {
    @apply text-neutral-600 dark:text-neutral-400
  }

  .invisible-nav-item {
    @apply text-white dark:text-white
  }

  .small-icon-mark {
    @apply size-12
  }

  .small-word-mark {
    @apply h-7
  }
</style>
